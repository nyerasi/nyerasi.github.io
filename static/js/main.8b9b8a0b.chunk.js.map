{"version":3,"sources":["components/SplashPage.js","App.js","serviceWorker.js","index.js"],"names":["Title","styled","h1","Subtitle","h2","Body","p","Background","div","About","SocialIcons","Icon","a","Emoji","props","className","role","aria-label","label","aria-hidden","symbol","SplashPage","state","width","height","updateWindowDimensions","bind","this","window","addEventListener","removeEventListener","setState","innerWidth","innerHeight","style","color","fontWeight","href","class","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s8CAGA,IAAMA,EAAQC,IAAOC,GAAV,KAOLC,EAAWF,IAAOG,GAAV,KAORC,EAAOJ,IAAOK,EAAV,KAOJC,EAAaN,IAAOO,IAAV,KAOVC,EAAQR,IAAOO,IAAV,KAQLE,EAAcT,IAAOO,IAAV,KAOXG,EAAOV,IAAOW,EAAV,KAYJC,EAAQ,SAAAC,GAAK,OACf,0BACIC,UAAU,QACVC,KAAK,MACLC,aAAYH,EAAMI,MAAQJ,EAAMI,MAAQ,GACxCC,cAAaL,EAAMI,MAAQ,QAAU,QAEpCJ,EAAMM,SAIMC,E,YAEnB,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KACDQ,MAAQ,CAAEC,MAAO,EAAGC,OAAQ,GACjC,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAHb,E,iFAOjBC,KAAKF,yBACLG,OAAOC,iBAAiB,SAAUF,KAAKF,0B,6CAIvCG,OAAOE,oBAAoB,SAAUH,KAAKF,0B,+CAI1CE,KAAKI,SAAS,CAAER,MAAOK,OAAOI,WAAYR,OAAQI,OAAOK,gB,+BAkBzD,OACE,kBAAC1B,EAAD,KACA,kBAACE,EAAD,KACI,kBAACT,EAAD,uBACiB,0BAAMkC,MAnBX,CAChBC,MAAO,UACPC,WAAY,MAiBS,UADjB,KAGA,kBAACjC,EAAD,UACI,0BAAM+B,MAjBI,CAClBC,MAAO,UACPC,WAAY,MAeJ,UADJ,QACgD,0BAAMF,MAZvC,CACnBC,MAAO,UACPC,WAAY,MAUwC,WADhD,WACiG,kBAAC,EAAD,CAAOhB,OAAO,+BAE/G,kBAACf,EAAD,+MAGA,kBAACA,EAAD,2EAGA,kBAACK,EAAD,KACI,8BAAM,kBAACC,EAAD,CAAM0B,KAAK,kCAAiC,uBAAGC,MAAM,oBAC3D,8BAAM,kBAAC3B,EAAD,CAAM0B,KAAK,uCAAsC,uBAAGC,MAAM,yBAChE,8BAAM,kBAAC3B,EAAD,CAAM0B,KAAK,qCAAoC,uBAAGC,MAAM,6B,GAtDpCC,IAAMC,W,kKChE9C,IAAMnC,EAAOJ,IAAOO,IAAV,KAgBKiC,MARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCJcC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8b9b8a0b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled, { css } from 'styled-components';\n\nconst Title = styled.h1`\n  font-family: 'Roboto', sans-serif;\n  font-weight: 400;\n  font-size: 3.5em;\n  color: white;\n`;\n\nconst Subtitle = styled.h2`\n  font-family: 'Roboto', sans-serif;\n  font-weight: 400;\n  font-size: 2em;\n  color: white;\n`;\n\nconst Body = styled.p`\n  font-family: 'Roboto', light;\n  font-weight: 300;\n  font-size: 1.25em;\n  color: white;\n`;\n\nconst Background = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  background-image: linear-gradient(#090B2D, #240035);\n`;\n\nconst About = styled.div`\n  margin-left: 25px;\n  width: 50%;\n  height: 100%;\n  text-align: left;\n  padding-bottom: 25px;\n`;\n\nconst SocialIcons = styled.div`\n  flex-direction: row;\n  width: 100%;\n  text-align: center;\n  padding-top: 25px;\n`\n\nconst Icon = styled.a`\n  color: white;\n  font-size: 2.5em;\n  padding-right: 0.75em;\n\n  :hover {\n\t\tcolor: #3EA2FF;\n\t\tcursor: pointer;\n    transition: 0.3s ease-out;\n\t}\n`\n\nconst Emoji = props => (\n    <span\n        className=\"emoji\"\n        role=\"img\"\n        aria-label={props.label ? props.label : \"\"}\n        aria-hidden={props.label ? \"false\" : \"true\"}\n    >\n        {props.symbol}\n    </span>\n);\n\nexport default class SplashPage extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { width: 0, height: 0};\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n  render() {\n    const nameStyle = {\n      color: '#FFD66C',\n      fontWeight: 500\n    };\n\n    const designStyle = {\n      color: '#FF8A8A',\n      fontWeight: 500\n    };\n\n    const developStyle = {\n      color: '#3EA2FF',\n      fontWeight: 500\n    };\n\n    return (\n      <Background>\n      <About>\n          <Title>\n            Hey there, I'm <span style={nameStyle}>Nikhil</span>.\n          </Title>\n          <Subtitle>\n            I <span style={designStyle}>design</span> and <span style={developStyle}>develop</span> things <Emoji symbol=\" 🤙🏾\"/>\n          </Subtitle>\n          <Body>\n          I’m a senior at UC Berkeley, where I study Data Science and teach iOS Development. I enjoy building products that enable people to live healthier, happier lives through cutting-edge technology.\n          </Body>\n          <Body>\n          You'll soon find some of my recent projects and photos right here.\n          </Body>\n          <SocialIcons>\n              <span><Icon href=\"https://www.github.com/nyerasi\"><i class=\"fab fa-github\"></i></Icon></span>\n              <span><Icon href=\"https://www.linkedin.com/in/nyerasi\"><i class=\"fab fa-linkedin-in\"></i></Icon></span>\n              <span><Icon href=\"https://medium.com/@nikhil.yerasi\"><i class=\"fab fa-medium-m\"></i></Icon></span>\n          </SocialIcons>\n        </About>\n      </Background>\n    );\n  }\n}\n","import React from 'react';\nimport SplashPage from './components/SplashPage.js';\n\nimport styled, { css } from 'styled-components';\n\nconst Body = styled.div`\n  position: fixed;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-size: cover;\n`;\n\nfunction App() {\n  return (\n    <Body>\n      <SplashPage/>\n    </Body>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}